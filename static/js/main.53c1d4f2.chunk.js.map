{"version":3,"sources":["firebase.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","styles","color","react_default","a","createElement","className","style","text","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","preventDefault","setState","userInput","target","value","handleMessageChange","userMessage","handleInput","state","name","placeHolder","userName","handleSubmit","handleSubmitMessageForm","database","ref","push","content","dateCreated","Date","toLocaleString","scroll","node","myRef","current","scrollTop","scrollHeight","handleColor","event","handleTheme","prevState","theme","themeColor","border","chatMessage","messages","React","createRef","console","log","_this2","on","response","val","data","values","_this3","action","onSubmit","htmlFor","type","id","placeholder","onChange","maxLength","onClick","required","index_es","icon","faCommentAlt","background","src_Header","concat","map","message","i","key","data-gramm_editor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53c1d4f2.chunk.js","sourcesContent":["import firebase from \"firebase\";\n// Initialize Firebase\nvar config = {\n  apiKey: \"AIzaSyABfJF03g1ZNaKeklq6-7qx94C3HDL97VI\",\n  authDomain: \"first-firebase-project-csj.firebaseapp.com\",\n  databaseURL: \"https://first-firebase-project-csj.firebaseio.com\",\n  projectId: \"first-firebase-project-csj\",\n  storageBucket: \"first-firebase-project-csj.appspot.com\",\n  messagingSenderId: \"678006963297\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React from \"react\";\n\nconst Header = props => {\n  const styles = {\n    color: props.color\n  };\n  return (\n    <div className=\"header\">\n      <h1 style={styles}>{props.text}</h1>\n    </div>\n  );\n};\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCommentAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./Header.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //this.state is the initial values\n    this.state = {\n      messages: [],\n      userInput: \"\",\n      userMessage: \"\",\n      userName: \"\",\n      placeHolder: \"e.g. JeannetteNg5\",\n      color: \"\",\n      theme: \"rgb(43, 40, 45)\",\n      themeColor: { border: \"white\", chatMessage: \"rgb(40, 44, 52)\" },\n      text: \"Light Mode\"\n    };\n    this.myRef = React.createRef();\n    console.log(\"constructor() this.myRef\", this.myRef);\n  }\n\n  componentDidMount() {\n    //getting entire database.When the value changes on the database, it will get response value\n    const dbRef = firebase.database().ref(\"messages\");\n    dbRef.on(\"value\", response => {\n      if (response.val() === null) {\n        return;\n      }\n      let data = Object.values(response.val());\n      this.setState(\n        {\n          messages: data\n        },\n        this.scroll\n      );\n      console.log(data);\n    });\n  }\n  //handleChange it will store the information on firebase. When I'm typing, it will be added to firebase\n  handleChange = e => {\n    e.preventDefault();\n    this.setState({ userInput: e.target.value });\n  };\n  handleMessageChange = e => {\n    e.preventDefault();\n    let value = e.target.value;\n    this.setState({ userMessage: value });\n  };\n\n  handleInput = () => {\n    if (this.state.name === \"\") {\n      this.setState({ placeHolder: \"Type Username\" });\n    } else {\n      this.setState({ userName: \"Message\" });\n    }\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState(\n      {\n        name: this.state.userInput\n      },\n      () => {\n        this.handleInput();\n      }\n    );\n  };\n\n  handleSubmitMessageForm = e => {\n    e.preventDefault();\n    //go to database, add the this.state userinput into the database. change the userinput as blank\n    const dbRef = firebase.database().ref(\"messages\");\n    dbRef.push({\n      content: this.state.userMessage,\n      name: this.state.userInput,\n      dateCreated: new Date().toLocaleString(\"en-US\"),\n      color: this.state.color\n    });\n    this.setState({ userMessage: \"\" });\n  };\n  componentDidUpdate() {\n    this.scroll();\n  }\n  scroll = () => {\n    const node = this.myRef.current;\n    node.scrollTop = node.scrollHeight;\n  };\n\n  handleColor = event => {\n    this.setState({ color: event.target.value });\n  };\n  handleTheme = () => {\n    this.setState(prevState =>\n      prevState.theme === \"white\"\n        ? {\n            theme: \"rgb(43, 40, 45)\",\n            themeColor: { border: \"lightgray\", chatMessage: \"rgb(40, 44, 52)\" },\n            text: \"Light Mode\"\n          }\n        : {\n            theme: \"white\",\n            themeColor: { border: \"lightgray\", chatMessage: \"#575757\" },\n            text: \"Dark Mode\"\n          }\n    );\n  };\n  render() {\n    return this.state.userName === \"\" ? (\n      <div className=\"firstPage\">\n        <div className=\"formContainer\">\n          <form\n            action=\"submit\"\n            onSubmit={this.handleSubmit}\n            ref={this.myRef}\n            className=\"firstPageForm\"\n          >\n            <h1>ChatTime</h1>\n            <p>Join HackerYou Chat room</p>\n            <p>Enter Username</p>\n            <div className=\"enterUserName\">\n              <label htmlFor=\"userName\" className=\"visuallyHidden\">\n                UserName\n              </label>\n              <input\n                value={this.state.userInput}\n                type=\"text\"\n                id=\"userName\"\n                placeholder={this.state.placeHolder}\n                onChange={this.handleChange}\n                maxLength=\"15\"\n              />\n            </div>\n            <p>Select Username Color</p>\n            <div className=\"themeColorSelection\">\n              <label htmlFor=\"orange\">\n                <input\n                  type=\"radio\"\n                  value=\"#f09665\"\n                  name=\"color\"\n                  id=\"orange\"\n                  onClick={this.handleColor}\n                  required\n                />\n              </label>\n              <label htmlFor=\"purple\">\n                <input\n                  type=\"radio\"\n                  value=\"#ab9df2\"\n                  name=\"color\"\n                  id=\"purple\"\n                  onClick={this.handleColor}\n                />\n              </label>\n              <label htmlFor=\"PaleVioletRed\">\n                <input\n                  type=\"radio\"\n                  value=\"#ea5d86\"\n                  name=\"color\"\n                  id=\"PaleVioletRed\"\n                  onClick={this.handleColor}\n                />\n              </label>\n              <label htmlFor=\"lightGreen\">\n                <input\n                  type=\"radio\"\n                  value=\"#a9dc76\"\n                  name=\"color\"\n                  id=\"lightGreen\"\n                  onClick={this.handleColor}\n                />\n              </label>\n            </div>\n            <button type=\"submit\" className=\"cta-1\">\n              <p>Let's Chat</p>\n              <FontAwesomeIcon icon={faCommentAlt} />\n            </button>\n          </form>\n        </div>\n        <footer>\n          <p>&copy; Jeannette Ng 2019</p>\n        </footer>\n      </div>\n    ) : (\n      <div className=\"App\" style={{ background: this.state.theme }}>\n        <Header text={this.state.userInput} color={this.state.color} />\n        <button\n          onClick={this.handleTheme}\n          style={{ background: this.state.themeColor.border }}\n          className=\"cta-2\"\n        >\n          {this.state.text}\n        </button>\n        <div className=\"container\">\n          <div\n            className=\"chatMessages\"\n            ref={this.myRef}\n            style={{ border: `1px solid ${this.state.themeColor.border}` }}\n          >\n            {this.state.messages.map((message, i) => {\n              return (\n                <div className=\"chatmessages\" key={i}>\n                  <div\n                    className=\"chat\"\n                    style={{ background: this.state.themeColor.chatMessage }}\n                  >\n                    <p className=\"name\" style={{ color: message.color }}>\n                      <div\n                        className=\"circle\"\n                        style={{ background: message.color }}\n                      />\n                      {message.name}\n                    </p>\n                    <p className=\"content\">{message.content}</p>\n                    <p className=\"dateCreated\">{message.dateCreated}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <form\n            action=\"submit\"\n            onSubmit={this.handleSubmitMessageForm}\n            id=\"messageInputArea\"\n          >\n            <textarea\n              value={this.state.userMessage}\n              type=\"text\"\n              placeholder=\"messages\"\n              onChange={this.handleMessageChange}\n              id=\"messageInput\"\n              data-gramm_editor=\"false\"\n              style={{ border: `1px solid ${this.state.themeColor.border}` }}\n            />\n            <button\n              type=\"submit\"\n              className=\"cta-messageInputArea\"\n              style={{ border: `1px solid ${this.state.themeColor.border}` }}\n            >\n              <FontAwesomeIcon icon={faCommentAlt} />\n            </button>\n          </form>\n        </div>\n        <footer style={{ background: this.state.color }}>\n          <p>&copy; Jeannette Ng 2019</p>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}