{"version":3,"sources":["firebase.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","styles","color","react_default","a","createElement","className","style","text","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","callApi","message","axios","get","params","fill_char","then","response","responses","data","result","stringArray","replace","console","log","handleChange","e","preventDefault","setState","userInput","target","value","handleMessageChange","userMessage","state","handleInput","name","errorMessage","userName","handleSubmit","handleSubmitMessageForm","_ref","asyncToGenerator","regenerator_default","mark","_callee","dbRef","newValue","wrap","_context","prev","next","database","ref","sent","push","content","dateCreated","Date","toLocaleString","fontColor","stop","_x","apply","arguments","scroll","node","myRef","current","scrollTop","scrollHeight","handleColor","event","handleTheme","prevState","theme","themeColor","border","chatMessage","handleLightColor","handleDarkColor","getDarkColor","getLightColor","messages","placeHolder","filteredMessage","placeHolderMessage","React","createRef","_this2","on","val","values","_this3","action","onSubmit","autocomplete","htmlFor","type","id","placeholder","onChange","maxLength","required","onClick","index_es","icon","faCommentAlt","src_Footer","background","src_Header","Switch_default","checked","concat","map","i","key","data-gramm_editor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAUAA,IAASC,cARI,CACXC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,iBAINP,QAAf,kBCAeQ,EAVA,SAAAC,GACb,IAAMC,EAAS,CACbC,MAAOF,EAAME,OAEf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAON,GAASD,EAAMQ,QCCjBC,EAPA,WACb,OACEN,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,yECkXSK,cA3Wb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KAsCRkB,QAAU,SAAAC,GACR,OAAOC,IACJC,IAAI,0CAA2C,CAC9CC,OAAQ,CACNd,KAAMW,EACNI,UAAW,OAGdC,KAAK,SAAAC,GACJ,IAAIC,EAAYD,EAASE,KAAKC,OAC9B,GAAwB,iBAAbF,EAEJ,CACL,IAAIG,EAAcH,EAAUI,QAAQ,MAAO,gBAE3C,OADAC,QAAQC,IAAIH,EAAa,eAClBA,EAJPE,QAAQC,IAAI,YAlDDrB,EA4DnBsB,aAAe,SAAAC,GACbA,EAAEC,iBACFxB,EAAKyB,SAAS,CAAEC,UAAWH,EAAEI,OAAOC,SA9DnB5B,EAgEnB6B,oBAAsB,SAAAN,GACpBA,EAAEC,iBACF,IAAII,EAAQL,EAAEI,OAAOC,MACrB5B,EAAKyB,SAAS,CAAEK,YAAaF,IAC7BR,QAAQC,IAAIrB,EAAK+B,MAAMD,cApEN9B,EAuEnBgC,YAAc,WACY,MAApBhC,EAAK+B,MAAME,KACbjC,EAAKyB,SAAS,CAAES,aAAc,kBAE9BlC,EAAKyB,SAAS,CAAEU,SAAU,aA3EXnC,EA8EnBoC,aAAe,SAAAb,GACbA,EAAEC,iBACFxB,EAAKyB,SACH,CACEQ,KAAMjC,EAAK+B,MAAML,WAEnB,WACE1B,EAAKgC,iBArFQhC,EAyFnBqC,wBAzFmB,eAAAC,EAAArC,OAAAsC,EAAA,EAAAtC,CAAAuC,EAAA/C,EAAAgD,KAyFO,SAAAC,EAAMnB,GAAN,IAAAoB,EAAAC,EAAA,OAAAJ,EAAA/C,EAAAoD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACxBzB,EAAEC,iBAEImB,EAAQ/D,EAASqE,WAAWC,IAAI,YAHdJ,EAAAE,KAAA,EAIHhD,EAAKO,QAAQP,EAAK+B,MAAMD,aAJrB,OAIpBc,EAJoBE,EAAAK,KAKxBR,EAAMS,KAAK,CACTC,QAAST,EACTX,KAAMjC,EAAK+B,MAAML,UACjB4B,aAAa,IAAIC,MAAOC,eAAe,SACvCjE,MAAOS,EAAK+B,MAAMxC,MAClBkE,UAAWzD,EAAK+B,MAAM0B,YAExBzD,EAAKyB,SAAS,CAAEK,YAAa,KAZL,wBAAAgB,EAAAY,SAAAhB,MAzFP,gBAAAiB,GAAA,OAAArB,EAAAsB,MAAAzD,KAAA0D,YAAA,GAAA7D,EA0GnB8D,OAAS,WACP,IAAMC,EAAO/D,EAAKgE,MAAMC,QACxBF,EAAKG,UAAYH,EAAKI,cA5GLnE,EA+GnBoE,YAAc,SAAAC,GACZrE,EAAKyB,SAAS,CAAElC,MAAO8E,EAAM1C,OAAOC,SAhHnB5B,EAmHnBsE,YAAc,WACZtE,EAAKyB,SAAS,SAAA8C,GAAS,MACD,UAApBA,EAAUC,MACN,CACEA,MAAO,UACPC,WAAY,CAAEC,OAAQ,YAAaC,YAAa,WAChD9E,KAAM,aACN4D,UAAW,QACXlE,MAAOS,EAAK4E,oBAEd,CACEJ,MAAO,QACPC,WAAY,CAAEC,OAAQ,YAAaC,YAAa,WAChD9E,KAAM,YACN4D,UAAW,QACXlE,MAAOS,EAAK6E,sBAlIH7E,EAwInB6E,gBAAkB,WACS,YAArB7E,EAAK+B,MAAMxC,MACbS,EAAKyB,SAAS,CAAElC,MAAO,YACO,YAArBS,EAAK+B,MAAMxC,MACpBS,EAAKyB,SAAS,CAAElC,MAAO,YACO,YAArBS,EAAK+B,MAAMxC,MACpBS,EAAKyB,SAAS,CAAElC,MAAO,YAEvBS,EAAKyB,SAAS,CAAElC,MAAO,aAhJRS,EAmJnB4E,iBAAmB,WACQ,YAArB5E,EAAK+B,MAAMxC,MACbS,EAAKyB,SAAS,CAAElC,MAAO,YACO,YAArBS,EAAK+B,MAAMxC,MACpBS,EAAKyB,SAAS,CAAElC,MAAO,YACO,YAArBS,EAAK+B,MAAMxC,MACpBS,EAAKyB,SAAS,CAAElC,MAAO,YAEvBS,EAAKyB,SAAS,CAAElC,MAAO,aA3JRS,EAgKnB8E,aAAe,SAAAvF,GACb,MAAc,YAAVA,GAAiC,YAAVA,EAClB,UACY,YAAVA,GAAiC,YAAVA,EACzB,UACY,YAAVA,GAAiC,YAAVA,EACzB,UAEA,WAxKQS,EA2KnB+E,cAAgB,SAAAxF,GACd,MAAc,YAAVA,GAAiC,YAAVA,EAClB,UACY,YAAVA,GAAiC,YAAVA,EACzB,UACY,YAAVA,GAAiC,YAAVA,EACzB,UAEA,WAhLTS,EAAK+B,MAAQ,CACXiD,SAAU,GACVtD,UAAW,GACXI,YAAa,GACbK,SAAU,GACV8C,YAAa,iBACb1F,MAAO,GACPiF,MAAO,UACPC,WAAY,CAAEC,OAAQ,QAASC,YAAa,WAC5C9E,KAAM,aACNqF,gBAAiB,GACjBC,mBAAoB,UACpBjD,aAAc,GACduB,UAAW,SAEbzD,EAAKgE,MAAQoB,IAAMC,YAlBFrF,mFAqBC,IAAAsF,EAAAnF,KAEJvB,EAASqE,WAAWC,IAAI,YAChCqC,GAAG,QAAS,SAAAzE,GAChB,GAAuB,OAAnBA,EAAS0E,MAAb,CAGA,IAAIxE,EAAOf,OAAOwF,OAAO3E,EAAS0E,OAClCF,EAAK7D,SACH,CACEuD,SAAUhE,GAEZsE,EAAKxB,wDAuET3D,KAAK2D,0CA+EE,IAAA4B,EAAAvF,KACP,MAA+B,KAAxBA,KAAK4B,MAAMI,SAChB3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QACEiG,OAAO,SACPC,SAAUzF,KAAKiC,aACfc,IAAK/C,KAAK6D,MACVrE,UAAU,gBACVkG,aAAa,OAEbrG,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOoG,QAAQ,WAAWnG,UAAU,kBAApC,YAGAH,EAAAC,EAAAC,cAAA,SACEkC,MAAOzB,KAAK4B,MAAML,UAClBqE,KAAK,OACLC,GAAG,WACHC,YAAa9F,KAAK4B,MAAMkD,YACxBiB,SAAU/F,KAAKmB,aACf6E,UAAU,KACVC,UAAQ,EACRP,aAAa,SAGjBrG,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLnE,MAAM,UACNK,KAAK,QACL+D,GAAG,SACHK,QAASlG,KAAKiE,YACdgC,UAAQ,IAIV5G,EAAAC,EAAAC,cAAA,SAAOoG,QAAQ,WAEftG,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLnE,MAAM,UACNK,KAAK,QACL+D,GAAG,SACHK,QAASlG,KAAKiE,cAGhB5E,EAAAC,EAAAC,cAAA,SAAOoG,QAAQ,WACftG,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLnE,MAAM,UACNK,KAAK,QACL+D,GAAG,gBACHK,QAASlG,KAAKiE,cAEhB5E,EAAAC,EAAAC,cAAA,SAAOoG,QAAQ,kBAEftG,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLnE,MAAM,UACNK,KAAK,QACL+D,GAAG,aACHK,QAASlG,KAAKiE,cAEhB5E,EAAAC,EAAAC,cAAA,SAAOoG,QAAQ,gBAEjBtG,EAAAC,EAAAC,cAAA,UAAQqG,KAAK,SAASpG,UAAU,SAC9BH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAiBC,KAAMC,SAI7BhH,EAAAC,EAAAC,cAAC+G,EAAD,OAGFjH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAE8G,WAAYvG,KAAK4B,MAAMyC,QACnDhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiH,EAAD,CAAQ9G,KAAMM,KAAK4B,MAAML,UAAWnC,MAAOY,KAAK4B,MAAMxC,QACtDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEL,MAAOY,KAAK4B,MAAM0B,YAA9B,aACAjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACkH,EAAAnH,EAAD,CACEoH,QAA8B,UAArB1G,KAAK4B,MAAMyC,MACpB0B,SAAU/F,KAAKmE,YACf1C,MAAM,WACNrC,MAAM,aAGVC,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEL,MAAOY,KAAK4B,MAAM0B,YAA9B,iBAINjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVuD,IAAK/C,KAAK6D,MACVpE,MAAO,CAAE8E,OAAM,aAAAoC,OAAe3G,KAAK4B,MAAM0C,WAAWC,UAEnDvE,KAAK4B,MAAMiD,SAAS+B,IAAI,SAACvG,EAASwG,GACjC,OACExH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAesH,IAAKD,GACjCxH,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVC,MAAO,CACL8G,WAAYhB,EAAK3D,MAAM0C,WAAWE,cAGpCnF,EAAAC,EAAAC,cAAA,KACEC,UAAU,OACVC,MAAO,CACLL,MACuB,UAArBmG,EAAK3D,MAAMyC,MACPkB,EAAKZ,aAAatE,EAAQjB,OAC1BmG,EAAKX,cAAcvE,EAAQjB,SAGlCiB,EAAQyB,MAEXzC,EAAAC,EAAAC,cAAA,KACEC,UAAU,UACVC,MAAO,CAAEL,MAAOmG,EAAK3D,MAAM0B,YAE1BjD,EAAQ6C,SAEX7D,EAAAC,EAAAC,cAAA,KACEC,UAAU,cACVC,MAAO,CACLL,MACuB,UAArBmG,EAAK3D,MAAMyC,MACPkB,EAAKZ,aAAatE,EAAQjB,OAC1BmG,EAAKX,cAAcvE,EAAQjB,SAGlCiB,EAAQ8C,kBAOrB9D,EAAAC,EAAAC,cAAA,QACEiG,OAAO,SACPC,SAAUzF,KAAKkC,wBACf2D,GAAG,oBAEHxG,EAAAC,EAAAC,cAAA,YACEkC,MAAOzB,KAAK4B,MAAMD,YAClBiE,KAAK,OACLE,YAAa9F,KAAK4B,MAAMoD,mBACxBe,SAAU/F,KAAK0B,oBACfmE,GAAG,eACHI,UAAQ,EACRc,oBAAkB,QAClBtH,MAAO,CACL8E,OAAM,aAAAoC,OAAe3G,KAAK4B,MAAM0C,WAAWC,WAG/ClF,EAAAC,EAAAC,cAAA,UACEqG,KAAK,SACLpG,UAAU,uBACVC,MAAO,CACL8E,OAAM,aAAAoC,OAAe3G,KAAK4B,MAAM0C,WAAWC,UAG7ClF,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAiBC,KAAMC,SAI7BhH,EAAAC,EAAAC,cAAA,UAAQE,MAAO,CAAE8G,WAAYvG,KAAK4B,MAAMxC,QACtCC,EAAAC,EAAAC,cAAA,4CAtWQyH,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlI,EAAAC,EAAAC,cAACiI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnH,KAAK,SAAAoH,GACjCA,EAAaC","file":"static/js/main.23b517dd.chunk.js","sourcesContent":["import firebase from \"firebase\";\n// Initialize Firebase\nvar config = {\n  apiKey: \"AIzaSyABfJF03g1ZNaKeklq6-7qx94C3HDL97VI\",\n  authDomain: \"first-firebase-project-csj.firebaseapp.com\",\n  databaseURL: \"https://first-firebase-project-csj.firebaseio.com\",\n  projectId: \"first-firebase-project-csj\",\n  storageBucket: \"first-firebase-project-csj.appspot.com\",\n  messagingSenderId: \"678006963297\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React from \"react\";\n\nconst Header = props => {\n  const styles = {\n    color: props.color\n  };\n  return (\n    <div className=\"header\">\n      <h1 style={styles}>{props.text}</h1>\n    </div>\n  );\n};\nexport default Header;\n","import React, { Component } from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>&copy; Jeannette Ng 2019</p>\n    </footer>\n  );\n};\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCommentAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\nimport axios from \"axios\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport Switch from \"@material-ui/core/Switch\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //this.state is the initial values\n    this.state = {\n      messages: [],\n      userInput: \"\",\n      userMessage: \"\",\n      userName: \"\",\n      placeHolder: \"e.g. Jeannette\",\n      color: \"\",\n      theme: \"#171717\",\n      themeColor: { border: \"white\", chatMessage: \"#1c1c1e\" },\n      text: \"Light Mode\",\n      filteredMessage: \"\",\n      placeHolderMessage: \"message\",\n      errorMessage: \"\",\n      fontColor: \"white\"\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //getting entire database.When the value changes on the database, it will get response value\n    const dbRef = firebase.database().ref(\"messages\");\n    dbRef.on(\"value\", response => {\n      if (response.val() === null) {\n        return;\n      }\n      let data = Object.values(response.val());\n      this.setState(\n        {\n          messages: data\n        },\n        this.scroll\n      );\n    });\n  }\n\n  //api Call\n  callApi = message => {\n    return axios\n      .get(\"https://www.purgomalum.com/service/json\", {\n        params: {\n          text: message,\n          fill_char: \"*\"\n        }\n      })\n      .then(response => {\n        let responses = response.data.result;\n        if (typeof responses != \"string\") {\n          console.log(\"error\");\n        } else {\n          let stringArray = responses.replace(/\\*/g, \"💩\");\n          console.log(stringArray, \"stringarray\");\n          return stringArray;\n        }\n      });\n  };\n\n  //handleChange it will store the information on firebase. When I'm typing, it will be added to firebase\n  handleChange = e => {\n    e.preventDefault();\n    this.setState({ userInput: e.target.value });\n  };\n  handleMessageChange = e => {\n    e.preventDefault();\n    let value = e.target.value;\n    this.setState({ userMessage: value });\n    console.log(this.state.userMessage);\n  };\n\n  handleInput = () => {\n    if (this.state.name === \" \") {\n      this.setState({ errorMessage: \"Type Username\" });\n    } else {\n      this.setState({ userName: \"Message\" });\n    }\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState(\n      {\n        name: this.state.userInput\n      },\n      () => {\n        this.handleInput();\n      }\n    );\n  };\n  handleSubmitMessageForm = async e => {\n    e.preventDefault();\n    //go to database, add the this.state userinput into the database. change the userinput as blank\n    const dbRef = firebase.database().ref(\"messages\");\n    let newValue = await this.callApi(this.state.userMessage);\n    dbRef.push({\n      content: newValue,\n      name: this.state.userInput,\n      dateCreated: new Date().toLocaleString(\"en-US\"),\n      color: this.state.color,\n      fontColor: this.state.fontColor\n    });\n    this.setState({ userMessage: \"\" });\n  };\n  componentDidUpdate() {\n    this.scroll();\n  }\n  scroll = () => {\n    const node = this.myRef.current;\n    node.scrollTop = node.scrollHeight;\n  };\n\n  handleColor = event => {\n    this.setState({ color: event.target.value });\n  };\n\n  handleTheme = () => {\n    this.setState(prevState =>\n      prevState.theme === \"white\"\n        ? {\n            theme: \"#171717\",\n            themeColor: { border: \"lightgray\", chatMessage: \"#1c1c1e\" },\n            text: \"Light Mode\",\n            fontColor: \"white\",\n            color: this.handleLightColor()\n          }\n        : {\n            theme: \"white\",\n            themeColor: { border: \"lightgray\", chatMessage: \"#e6e4ec\" },\n            text: \"Dark Mode\",\n            fontColor: \"black\",\n            color: this.handleDarkColor()\n          }\n    );\n  };\n\n  // If this.state.color is lightcolor, change this.state.color to darker color when the state is light.\n  handleDarkColor = () => {\n    if (this.state.color === \"#ab9df2\") {\n      this.setState({ color: \"#6900F2\" });\n    } else if (this.state.color === \"#f09665\") {\n      this.setState({ color: \"#A14B12\" });\n    } else if (this.state.color === \"#a9dc76\") {\n      this.setState({ color: \"#325115\" });\n    } else {\n      this.setState({ color: \"#901437\" });\n    }\n  };\n  handleLightColor = () => {\n    if (this.state.color === \"#6900F2\") {\n      this.setState({ color: \"#ab9df2\" });\n    } else if (this.state.color === \"#A14B12\") {\n      this.setState({ color: \"#f09665\" });\n    } else if (this.state.color === \"#325115\") {\n      this.setState({ color: \"#a9dc76\" });\n    } else {\n      this.setState({ color: \"#ea5d86\" });\n    }\n  };\n\n  // If this.state.color is lightcolor, change this.state.color to darker color when the state is light.\n  getDarkColor = color => {\n    if (color === \"#ab9df2\" || color === \"#6900F2\") {\n      return \"#6900F2\";\n    } else if (color === \"#f09665\" || color === \"#A14B12\") {\n      return \"#A14B12\";\n    } else if (color === \"#a9dc76\" || color === \"#325115\") {\n      return \"#325115\";\n    } else {\n      return \"#901437\";\n    }\n  };\n  getLightColor = color => {\n    if (color === \"#6900F2\" || color === \"#ab9df2\") {\n      return \"#ab9df2\";\n    } else if (color === \"#A14B12\" || color === \"#f09665\") {\n      return \"#f09665\";\n    } else if (color === \"#325115\" || color === \"#a9dc76\") {\n      return \"#a9dc76\";\n    } else {\n      return \"#ea5d86\";\n    }\n  };\n\n  render() {\n    return this.state.userName === \"\" ? (\n      <div className=\"firstPage\">\n        <div className=\"formContainer\">\n          <form\n            action=\"submit\"\n            onSubmit={this.handleSubmit}\n            ref={this.myRef}\n            className=\"firstPageForm\"\n            autocomplete=\"off\"\n          >\n            <h1>ChatTime</h1>\n            <p>Join HackerYou Chat room</p>\n            <p>Enter Username</p>\n            <div className=\"enterUserName\">\n              <label htmlFor=\"userName\" className=\"visuallyHidden\">\n                UserName\n              </label>\n              <input\n                value={this.state.userInput}\n                type=\"text\"\n                id=\"userName\"\n                placeholder={this.state.placeHolder}\n                onChange={this.handleChange}\n                maxLength=\"15\"\n                required\n                autocomplete=\"off\"              />\n              {/* <p>{this.state.errorMessage}</p> */}\n            </div>\n            <p>Select Username Color</p>\n            <div className=\"themeColorSelection\">\n              <input\n                type=\"radio\"\n                value=\"#f09665\"\n                name=\"color\"\n                id=\"orange\"\n                onClick={this.handleColor}\n                required\n                // checked\n\n              />\n              <label htmlFor=\"orange\" />\n\n              <input\n                type=\"radio\"\n                value=\"#ab9df2\"\n                name=\"color\"\n                id=\"purple\"\n                onClick={this.handleColor}\n              />\n\n              <label htmlFor=\"purple\" />\n              <input\n                type=\"radio\"\n                value=\"#ea5d86\"\n                name=\"color\"\n                id=\"PaleVioletRed\"\n                onClick={this.handleColor}\n              />\n              <label htmlFor=\"PaleVioletRed\" />\n\n              <input\n                type=\"radio\"\n                value=\"#a9dc76\"\n                name=\"color\"\n                id=\"lightGreen\"\n                onClick={this.handleColor}\n              />\n              <label htmlFor=\"lightGreen\" />\n            </div>\n            <button type=\"submit\" className=\"cta-1\">\n              <p>Let's Chat</p>\n              <FontAwesomeIcon icon={faCommentAlt} />\n            </button>\n          </form>\n        </div>\n        <Footer />\n      </div>\n    ) : (\n      <div className=\"App\" style={{ background: this.state.theme }}>\n        <div className=\"heading\">\n          <div className=\"container\">\n            <Header text={this.state.userInput} color={this.state.color} />\n            <div className=\"toggleSwitch\">\n              <p style={{ color: this.state.fontColor }}>Dark Mode</p>\n              <div className=\"switch\">\n                <Switch\n                  checked={this.state.theme === \"white\"}\n                  onChange={this.handleTheme}\n                  value=\"checkedA\"\n                  color=\"primary\"\n                />\n              </div>\n              <p style={{ color: this.state.fontColor }}>Light Mode</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div\n            className=\"chatMessages\"\n            ref={this.myRef}\n            style={{ border: `1px solid ${this.state.themeColor.border}` }}\n          >\n            {this.state.messages.map((message, i) => {\n              return (\n                <div className=\"chatmessages\" key={i}>\n                  <div\n                    className=\"chat\"\n                    style={{\n                      background: this.state.themeColor.chatMessage\n                    }}\n                  >\n                    <p\n                      className=\"name\"\n                      style={{\n                        color:\n                          this.state.theme === \"white\"\n                            ? this.getDarkColor(message.color)\n                            : this.getLightColor(message.color)\n                      }}\n                    >\n                      {message.name}\n                    </p>\n                    <p\n                      className=\"content\"\n                      style={{ color: this.state.fontColor }}\n                    >\n                      {message.content}\n                    </p>\n                    <p\n                      className=\"dateCreated\"\n                      style={{\n                        color:\n                          this.state.theme === \"white\"\n                            ? this.getDarkColor(message.color)\n                            : this.getLightColor(message.color)\n                      }}\n                    >\n                      {message.dateCreated}\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <form\n            action=\"submit\"\n            onSubmit={this.handleSubmitMessageForm}\n            id=\"messageInputArea\"\n          >\n            <textarea\n              value={this.state.userMessage}\n              type=\"text\"\n              placeholder={this.state.placeHolderMessage}\n              onChange={this.handleMessageChange}\n              id=\"messageInput\"\n              required\n              data-gramm_editor=\"false\"\n              style={{\n                border: `1px solid ${this.state.themeColor.border}`\n              }}\n            />\n            <button\n              type=\"submit\"\n              className=\"cta-messageInputArea\"\n              style={{\n                border: `1px solid ${this.state.themeColor.border}`\n              }}\n            >\n              <FontAwesomeIcon icon={faCommentAlt} />\n            </button>\n          </form>\n        </div>\n        <footer style={{ background: this.state.color }}>\n          <p>&copy; Jeannette Ng 2019</p>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}